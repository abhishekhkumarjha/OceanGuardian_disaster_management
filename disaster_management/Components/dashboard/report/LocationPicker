import React, { useState, useMemo } from 'react';
import { MapContainer, TileLayer, Marker, Popup, useMapEvents } from 'react-leaflet';
import 'leaflet/dist/leaflet.css';
import L from 'leaflet';
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { 
  Navigation, 
  Target
} from "lucide-react";

// Fix for default Leaflet icon not showing up
delete L.Icon.Default.prototype._getIconUrl;
L.Icon.Default.mergeOptions({
  iconRetinaUrl: 'https://unpkg.com/leaflet@1.7.1/dist/images/marker-icon-2x.png',
  iconUrl: 'https://unpkg.com/leaflet@1.7.1/dist/images/marker-icon.png',
  shadowUrl: 'https://unpkg.com/leaflet@1.7.1/dist/images/marker-shadow.png',
});

function LocationMarker({ position, setPosition, onLocationSelect }) {
  const map = useMapEvents({
    click(e) {
      setPosition(e.latlng);
      map.flyTo(e.latlng, map.getZoom());
      onLocationSelect(e.latlng.lat, e.latlng.lng, "Selected on map");
    },
  });

  return position === null ? null : (
    <Marker position={position}>
      <Popup>You are here</Popup>
    </Marker>
  );
}

export default function LocationPicker({ 
  currentLocation, 
  onLocationSelect, 
  selectedLocation 
}) {
  const [manualCoords, setManualCoords] = useState({
    latitude: selectedLocation?.lat || "",
    longitude: selectedLocation?.lng || "",
    description: selectedLocation?.description || ""
  });
  
  const [mapPosition, setMapPosition] = useState(
    selectedLocation?.lat && selectedLocation?.lng ? { lat: selectedLocation.lat, lng: selectedLocation.lng } : null
  );

  const defaultCenter = useMemo(() => [15.9129, 79.7400], []);

  const useCurrentLocation = () => {
    if (currentLocation) {
      const { latitude, longitude } = currentLocation;
      setMapPosition({ lat: latitude, lng: longitude });
      onLocationSelect(latitude, longitude, "Current location");
      setManualCoords({ latitude, longitude, description: "Current location" });
    } else {
      navigator.geolocation.getCurrentPosition(
        (position) => {
          const lat = position.coords.latitude;
          const lng = position.coords.longitude;
          setMapPosition({ lat, lng });
          onLocationSelect(lat, lng, "Current location");
          setManualCoords({ latitude: lat, longitude: lng, description: "Current location" });
        },
        (error) => console.error("Location access denied:", error)
      );
    }
  };

  const handleManualInput = (field, value) => {
    const updated = { ...manualCoords, [field]: value };
    setManualCoords(updated);
    
    if (updated.latitude && updated.longitude) {
      const lat = parseFloat(updated.latitude);
      const lng = parseFloat(updated.longitude);
      setMapPosition({ lat, lng });
      onLocationSelect(lat, lng, updated.description);
    }
  };

  return (
    <div className="space-y-6">
      <div className="flex flex-col sm:flex-row gap-3">
        <Button 
          type="button"
          variant="outline" 
          onClick={useCurrentLocation}
          className="flex items-center gap-2"
        >
          <Navigation className="w-4 h-4" />
          Use Current Location
        </Button>
      </div>

      <div className="grid md:grid-cols-2 gap-4">
        <div className="space-y-2">
          <Label htmlFor="latitude">Latitude *</Label>
          <Input id="latitude" type="number" step="any" placeholder="e.g. 13.0827" value={manualCoords.latitude} onChange={(e) => handleManualInput("latitude", e.target.value)} required />
        </div>
        <div className="space-y-2">
          <Label htmlFor="longitude">Longitude *</Label>
          <Input id="longitude" type="number" step="any" placeholder="e.g. 80.2707" value={manualCoords.longitude} onChange={(e) => handleManualInput("longitude", e.target.value)} required />
        </div>
      </div>

      <div className="space-y-2">
        <Label htmlFor="location_description">Location Description</Label>
        <Input id="location_description" placeholder="e.g. Marina Beach, Chennai" value={manualCoords.description} onChange={(e) => handleManualInput("description", e.target.value)} />
      </div>

      <div className="h-80 w-full rounded-xl overflow-hidden z-0">
        <MapContainer center={mapPosition || defaultCenter} zoom={mapPosition ? 13 : 5} scrollWheelZoom={true} style={{ height: '100%', width: '100%' }}>
          <TileLayer url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png" />
          <LocationMarker position={mapPosition} setPosition={setMapPosition} onLocationSelect={onLocationSelect} />
        </MapContainer>
      </div>

      {selectedLocation?.lat && selectedLocation?.lng && (
        <div className="p-4 bg-green-50 border border-green-200 rounded-lg">
          <div className="flex items-center gap-2 text-green-800">
            <Target className="w-4 h-4" />
            <span className="font-medium">Location Selected</span>
          </div>
          <p className="text-sm text-green-700 mt-1">
            {selectedLocation.lat.toFixed(6)}, {selectedLocation.lng.toFixed(6)}
          </p>
        </div>
      )}
    </div>
  );
}