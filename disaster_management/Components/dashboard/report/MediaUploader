
import React, { useState, useRef, useEffect, useCallback } from 'react';
import { Button } from "@/components/ui/button";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { UploadFile } from "@/integrations/Core";
import { 
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { 
  Upload, 
  Camera, 
  Image, 
  Video, 
  X,
  CheckCircle,
  Loader2,
  Smartphone
} from "lucide-react";

export default function MediaUploader({ 
  onUpload, 
  existingImages = [], 
  existingVideos = [] 
}) {
  const [uploading, setUploading] = useState(false);
  const [uploadProgress, setUploadProgress] = useState({});
  const [error, setError] = useState(null);
  const fileInputRef = useRef(null);

  // New states and refs for camera functionality
  const [showCameraDialog, setShowCameraDialog] = useState(false);
  const [isCameraReady, setIsCameraReady] = useState(false);
  const videoRef = useRef(null);
  const streamRef = useRef(null);
  const isMobile = /iPhone|iPad|iPod|Android/i.test(navigator.userAgent);

  const handleFileUpload = async (files) => {
    setUploading(true);
    setError(null);
    
    const uploadPromises = Array.from(files).map(async (file) => {
      try {
        setUploadProgress(prev => ({ ...prev, [file.name]: 0 }));
        
        // Simulate progress
        const progressInterval = setInterval(() => {
          setUploadProgress(prev => ({
            ...prev,
            [file.name]: Math.min(90, (prev[file.name] || 0) + 10)
          }));
        }, 200);

        const result = await UploadFile({ file });
        clearInterval(progressInterval);
        
        setUploadProgress(prev => ({ ...prev, [file.name]: 100 }));
        
        return {
          url: result.file_url,
          type: file.type.startsWith('image/') ? 'image' : 'video'
        };
      } catch (error) {
        console.error("Upload failed:", error);
        setError(`Failed to upload ${file.name}`);
        return null;
      }
    });

    const results = await Promise.all(uploadPromises);
    const successful = results.filter(r => r !== null);
    
    if (successful.length > 0) {
      const images = successful.filter(r => r.type === 'image').map(r => r.url);
      const videos = successful.filter(r => r.type === 'video').map(r => r.url);
      
      if (images.length > 0) onUpload(images, 'image');
      if (videos.length > 0) onUpload(videos, 'video');
    }

    setUploading(false);
    setUploadProgress({});
  };

  const removeMedia = (url, type) => {
    // Note: In a real app, you'd also want to delete from storage
    if (type === 'image') {
      const updated = existingImages.filter(img => img !== url);
      onUpload(updated, 'image');
    } else {
      const updated = existingVideos.filter(vid => vid !== url);
      onUpload(updated, 'video');
    }
  };

  // Camera Functions
  const stopCamera = useCallback(() => {
    if (streamRef.current) {
      streamRef.current.getTracks().forEach(track => track.stop());
      streamRef.current = null;
    }
    setIsCameraReady(false);
  }, []); // No dependencies as it only accesses refs and state setters

  const startCamera = useCallback(async () => {
    try {
      const stream = await navigator.mediaDevices.getUserMedia({ 
        video: { facingMode: isMobile ? 'environment' : 'user' },
        audio: false 
      });
      streamRef.current = stream;
      if (videoRef.current) {
        videoRef.current.srcObject = stream;
      }
      setIsCameraReady(true);
    } catch (err) {
      console.error("Error accessing camera:", err);
      setError("Could not access the camera. Please check your browser permissions.");
      setShowCameraDialog(false);
    }
  }, [isMobile, setError, setShowCameraDialog]); // Dependencies are isMobile, setError, and setShowCameraDialog

  const capturePhoto = () => {
    if (!videoRef.current || !isCameraReady) return;

    const canvas = document.createElement('canvas');
    canvas.width = videoRef.current.videoWidth;
    canvas.height = videoRef.current.videoHeight;
    const ctx = canvas.getContext('2d');
    ctx.drawImage(videoRef.current, 0, 0);

    canvas.toBlob((blob) => {
      const file = new File([blob], `capture-${Date.now()}.jpg`, { type: 'image/jpeg' });
      handleFileUpload([file]);
      setShowCameraDialog(false);
    }, 'image/jpeg', 0.9);
  };

  useEffect(() => {
    if (showCameraDialog) {
      startCamera();
    } else {
      stopCamera();
    }
    // Cleanup function: stop camera when component unmounts or dependencies change
    return () => stopCamera();
  }, [showCameraDialog, startCamera, stopCamera]);


  return (
    <>
      <div className="space-y-6">
        {/* Upload Controls */}
        <div className="grid sm:grid-cols-2 gap-4">
          <div className="border-2 border-dashed border-slate-300 rounded-xl p-6 text-center hover:border-slate-400 transition-colors">
            <input
              ref={fileInputRef}
              type="file"
              multiple
              accept="image/*,video/*"
              onChange={(e) => handleFileUpload(e.target.files)}
              className="hidden"
            />
            <Upload className="w-12 h-12 text-slate-400 mx-auto mb-4" />
            <h4 className="font-semibold mb-2">Upload Media</h4>
            <p className="text-sm text-slate-500 mb-4">
              Select photos or videos from your device
            </p>
            <Button
              type="button"
              variant="outline"
              onClick={() => fileInputRef.current?.click()}
              disabled={uploading}
            >
              <Image className="w-4 h-4 mr-2" />
              Choose Files
            </Button>
          </div>

          <div className="border-2 border-dashed border-slate-300 rounded-xl p-6 text-center hover:border-slate-400 transition-colors">
            {isMobile ? (
              <Smartphone className="w-12 h-12 text-slate-400 mx-auto mb-4" />
            ) : (
              <Camera className="w-12 h-12 text-slate-400 mx-auto mb-4" />
            )}
            <h4 className="font-semibold mb-2">Take Photo/Video</h4>
            <p className="text-sm text-slate-500 mb-4">
              Use your device camera to capture
            </p>
            <Button
              type="button"
              variant="outline"
              onClick={() => setShowCameraDialog(true)}
              disabled={uploading}
            >
              <Camera className="w-4 h-4 mr-2" />
              Open Camera
            </Button>
          </div>
        </div>

        {/* Upload Progress */}
        {Object.keys(uploadProgress).length > 0 && (
          <div className="space-y-2">
            {Object.entries(uploadProgress).map(([filename, progress]) => (
              <div key={filename} className="flex items-center gap-3 p-2 bg-slate-50 rounded">
                <Loader2 className="w-4 h-4 animate-spin text-blue-600" />
                <span className="text-sm flex-1 truncate">{filename}</span>
                <span className="text-sm text-slate-500">{progress}%</span>
              </div>
            ))}
          </div>
        )}

        {/* Error Display */}
        {error && (
          <Alert variant="destructive">
            <AlertDescription>{error}</AlertDescription>
          </Alert>
        )}

        {/* Uploaded Images */}
        {existingImages.length > 0 && (
          <div>
            <h4 className="font-semibold mb-3 flex items-center gap-2">
              <Image className="w-4 h-4" />
              Uploaded Images ({existingImages.length})
            </h4>
            <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
              {existingImages.map((url, index) => (
                <div key={index} className="relative group">
                  <img
                    src={url}
                    alt={`Upload ${index + 1}`}
                    className="w-full h-24 object-cover rounded-lg"
                  />
                  <Button
                    type="button"
                    variant="destructive"
                    size="icon"
                    className="absolute top-1 right-1 w-6 h-6 opacity-0 group-hover:opacity-100 transition-opacity"
                    onClick={() => removeMedia(url, 'image')}
                  >
                    <X className="w-3 h-3" />
                  </Button>
                  <div className="absolute bottom-1 left-1 bg-white/50 rounded-full p-0.5">
                    <CheckCircle className="w-4 h-4 text-green-500" />
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}

        {/* Uploaded Videos */}
        {existingVideos.length > 0 && (
          <div>
            <h4 className="font-semibold mb-3 flex items-center gap-2">
              <Video className="w-4 h-4" />
              Uploaded Videos ({existingVideos.length})
            </h4>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              {existingVideos.map((url, index) => (
                <div key={index} className="relative group">
                  <video
                    src={url}
                    controls
                    className="w-full h-32 object-cover rounded-lg"
                  />
                  <Button
                    type="button"
                    variant="destructive"
                    size="icon"
                    className="absolute top-1 right-1 w-6 h-6 opacity-0 group-hover:opacity-100 transition-opacity"
                    onClick={() => removeMedia(url, 'video')}
                  >
                    <X className="w-3 h-3" />
                  </Button>
                </div>
              ))}
            </div>
          </div>
        )}

        {/* Guidelines */}
        <div className="p-4 bg-blue-50 border border-blue-200 rounded-lg">
          <h4 className="font-semibold text-blue-900 mb-2">Media Guidelines</h4>
          <ul className="text-sm text-blue-800 space-y-1">
            <li>• Maximum file size: 25MB per file</li>
            <li>• Supported formats: JPEG, PNG, MP4, MOV</li>
            <li>• Clear, well-lit photos help with verification</li>
            <li>• Include landmarks or reference points when possible</li>
          </ul>
        </div>
      </div>
      
      {/* Camera Dialog */}
      <Dialog open={showCameraDialog} onOpenChange={setShowCameraDialog}>
        <DialogContent className="sm:max-w-xl">
          <DialogHeader>
            <DialogTitle className="flex items-center gap-2">
              <Camera className="w-5 h-5" />
              Take a Picture
            </DialogTitle>
          </DialogHeader>
          <div className="relative aspect-video bg-black rounded-lg overflow-hidden">
            <video
              ref={videoRef}
              autoPlay
              playsInline
              muted
              className="absolute inset-0 w-full h-full object-cover"
            />
            {!isCameraReady && (
              <div className="absolute inset-0 flex items-center justify-center text-white">
                <div className="flex items-center gap-2">
                  <Loader2 className="w-6 h-6 animate-spin" />
                  Starting camera...
                </div>
              </div>
            )}
          </div>
          <div className="flex justify-end gap-3 mt-4">
            <Button
              variant="outline"
              onClick={() => setShowCameraDialog(false)}
            >
              Cancel
            </Button>
            <Button
              onClick={capturePhoto}
              disabled={!isCameraReady}
              className="bg-blue-600 hover:bg-blue-700"
            >
              <Camera className="w-4 h-4 mr-2" />
              Capture Photo
            </Button>
          </div>
        </DialogContent>
      </Dialog>
    </>
  );
}
