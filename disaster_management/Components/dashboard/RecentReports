import React from 'react';
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { 
  AlertTriangle, 
  MapPin, 
  Clock, 
  Shield,
  Eye,
  ExternalLink
} from "lucide-react";
import { Skeleton } from "@/components/ui/skeleton";
import { format } from "date-fns";

const hazardColors = {
  tsunami: "bg-red-100 text-red-800 border-red-200",
  storm_surge: "bg-orange-100 text-orange-800 border-orange-200",
  high_waves: "bg-blue-100 text-blue-800 border-blue-200",
  swell_surge: "bg-indigo-100 text-indigo-800 border-indigo-200",
  coastal_current: "bg-teal-100 text-teal-800 border-teal-200",
  unusual_tidal: "bg-purple-100 text-purple-800 border-purple-200",
  coastal_erosion: "bg-yellow-100 text-yellow-800 border-yellow-200",
  sea_level_rise: "bg-green-100 text-green-800 border-green-200",
  oil_spill: "bg-gray-100 text-gray-800 border-gray-200",
  marine_debris: "bg-brown-100 text-brown-800 border-brown-200",
  other: "bg-slate-100 text-slate-800 border-slate-200"
};

const severityColors = {
  low: "bg-green-100 text-green-800",
  moderate: "bg-yellow-100 text-yellow-800",
  high: "bg-orange-100 text-orange-800",
  critical: "bg-red-100 text-red-800"
};

const ReportItem = ({ report, userRole }) => {
  return (
    <div className="p-4 border border-slate-200 rounded-xl hover:shadow-sm transition-shadow">
      <div className="flex items-start justify-between mb-3">
        <div className="flex-1">
          <h4 className="font-semibold text-slate-900 mb-1">{report.title}</h4>
          <p className="text-sm text-slate-600 line-clamp-2">{report.description}</p>
        </div>
        {report.is_emergency && (
          <AlertTriangle className="w-5 h-5 text-red-500 ml-2 animate-pulse" />
        )}
      </div>
      
      <div className="flex flex-wrap gap-2 mb-3">
        <Badge className={hazardColors[report.hazard_type] || hazardColors.other}>
          {report.hazard_type.replace(/_/g, ' ')}
        </Badge>
        <Badge className={severityColors[report.severity]}>
          {report.severity}
        </Badge>
        {report.verification_status === "verified" && (
          <Badge className="bg-green-100 text-green-800">
            <Shield className="w-3 h-3 mr-1" />
            Verified
          </Badge>
        )}
      </div>

      <div className="flex items-center justify-between text-sm text-slate-500">
        <div className="flex items-center gap-4">
          <div className="flex items-center gap-1">
            <MapPin className="w-3 h-3" />
            <span>{report.location_description || "Location not specified"}</span>
          </div>
          <div className="flex items-center gap-1">
            <Clock className="w-3 h-3" />
            <span>{format(new Date(report.created_date), "MMM d, HH:mm")}</span>
          </div>
        </div>
        
        {(userRole === "official" || userRole === "analyst") && (
          <Button variant="ghost" size="sm">
            <Eye className="w-4 h-4" />
          </Button>
        )}
      </div>
    </div>
  );
};

export default function RecentReports({ reports, isLoading, userRole }) {
  if (isLoading) {
    return (
      <Card>
        <CardHeader>
          <Skeleton className="h-6 w-32" />
        </CardHeader>
        <CardContent className="space-y-4">
          {Array(3).fill(0).map((_, i) => (
            <div key={i} className="p-4 border border-slate-200 rounded-xl">
              <Skeleton className="h-4 w-full mb-2" />
              <Skeleton className="h-3 w-3/4 mb-3" />
              <div className="flex gap-2 mb-3">
                <Skeleton className="h-5 w-16 rounded-full" />
                <Skeleton className="h-5 w-12 rounded-full" />
              </div>
              <Skeleton className="h-3 w-1/2" />
            </div>
          ))}
        </CardContent>
      </Card>
    );
  }

  return (
    <Card>
      <CardHeader>
        <div className="flex items-center justify-between">
          <CardTitle className="flex items-center gap-2">
            <Clock className="w-5 h-5" />
            Recent Reports
          </CardTitle>
          <Button variant="ghost" size="sm">
            <ExternalLink className="w-4 h-4" />
          </Button>
        </div>
      </CardHeader>
      <CardContent>
        {reports.length === 0 ? (
          <div className="text-center py-8 text-slate-500">
            <AlertTriangle className="w-12 h-12 mx-auto mb-4 text-slate-300" />
            <p>No recent reports found</p>
          </div>
        ) : (
          <div className="space-y-4">
            {reports.map((report) => (
              <ReportItem 
                key={report.id} 
                report={report} 
                userRole={userRole}
              />
            ))}
          </div>
        )}
      </CardContent>
    </Card>
  );
}