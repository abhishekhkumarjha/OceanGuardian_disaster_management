import React, { useState, useEffect } from "react";
import { User } from "@/entities/User";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { Badge } from "@/components/ui/badge";
import { useNavigate } from "react-router-dom";
import { createPageUrl } from "@/utils";
import { 
  User as UserIcon, 
  Shield, 
  Building, 
  Phone, 
  Mail,
  MapPin,
  CheckCircle,
  Clock,
  XCircle,
  ArrowLeft,
  Save
} from "lucide-react";

const ROLE_TYPES = [
  { value: "citizen", label: "Citizen", description: "General public member" },
  { value: "volunteer", label: "Volunteer", description: "Community volunteer" },
  { value: "official", label: "Official", description: "Government official" },
  { value: "analyst", label: "Analyst", description: "Data analyst" }
];

const EXPERTISE_AREAS = [
  "Ocean Science", "Marine Biology", "Coastal Engineering", "Emergency Management",
  "Weather Forecasting", "Disaster Response", "Maritime Safety", "Environmental Science",
  "GIS/Remote Sensing", "Social Media Analysis"
];

export default function UserProfile() {
  const navigate = useNavigate();
  const [user, setUser] = useState(null);
  const [isLoading, setIsLoading] = useState(true);
  const [isSaving, setSaving] = useState(false);
  const [successMessage, setSuccessMessage] = useState("");
  const [error, setError] = useState("");
  
  const [formData, setFormData] = useState({
    full_name: "",
    phone: "",
    organization: "",
    role_type: "citizen",
    location: "",
    expertise_areas: []
  });

  useEffect(() => {
    loadUserProfile();
  }, []);

  const loadUserProfile = async () => {
    try {
      const currentUser = await User.me();
      setUser(currentUser);
      setFormData({
        full_name: currentUser.full_name || "",
        phone: currentUser.phone || "",
        organization: currentUser.organization || "",
        role_type: currentUser.role_type || "citizen",
        location: currentUser.location || "",
        expertise_areas: currentUser.expertise_areas || []
      });
    } catch (error) {
      setError("Failed to load user profile");
    }
    setIsLoading(false);
  };

  const handleInputChange = (field, value) => {
    setFormData(prev => ({ ...prev, [field]: value }));
  };

  const handleExpertiseToggle = (area) => {
    setFormData(prev => ({
      ...prev,
      expertise_areas: prev.expertise_areas.includes(area)
        ? prev.expertise_areas.filter(a => a !== area)
        : [...prev.expertise_areas, area]
    }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setSaving(true);
    setError("");
    
    try {
      await User.updateMyUserData(formData);
      setSuccessMessage("Profile updated successfully!");
      setTimeout(() => setSuccessMessage(""), 3000);
    } catch (error) {
      setError("Failed to update profile. Please try again.");
    }
    setSaving(false);
  };

  const getVerificationStatus = () => {
    const status = user?.verification_status || "pending";
    const config = {
      verified: { icon: CheckCircle, color: "text-green-600", bg: "bg-green-100", label: "Verified" },
      pending: { icon: Clock, color: "text-orange-600", bg: "bg-orange-100", label: "Pending Verification" },
      rejected: { icon: XCircle, color: "text-red-600", bg: "bg-red-100", label: "Verification Rejected" }
    };
    return config[status];
  };

  if (isLoading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-slate-50 to-blue-50 flex items-center justify-center">
        <div className="flex items-center gap-3">
          <UserIcon className="w-8 h-8 text-blue-600 animate-pulse" />
          <span className="text-lg font-medium text-slate-700">Loading Profile...</span>
        </div>
      </div>
    );
  }

  const verificationStatus = getVerificationStatus();

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 to-blue-50 p-4 md:p-8">
      <div className="max-w-4xl mx-auto">
        <div className="flex items-center gap-4 mb-8">
          <Button
            variant="outline"
            size="icon"
            onClick={() => navigate(createPageUrl("Dashboard"))}
          >
            <ArrowLeft className="w-4 h-4" />
          </Button>
          <div>
            <h1 className="text-3xl font-bold text-slate-900">User Profile</h1>
            <p className="text-slate-600">Manage your account information and preferences</p>
          </div>
        </div>

        {successMessage && (
          <Alert className="mb-6 border-green-200 bg-green-50">
            <CheckCircle className="w-4 h-4 text-green-600" />
            <AlertDescription className="text-green-800">{successMessage}</AlertDescription>
          </Alert>
        )}

        {error && (
          <Alert className="mb-6 border-red-200 bg-red-50">
            <XCircle className="w-4 h-4 text-red-600" />
            <AlertDescription className="text-red-800">{error}</AlertDescription>
          </Alert>
        )}

        <div className="grid lg:grid-cols-3 gap-8">
          {/* Profile Summary */}
          <div className="lg:col-span-1">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <UserIcon className="w-5 h-5" />
                  Profile Summary
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="text-center">
                  <div className="w-20 h-20 bg-gradient-to-r from-blue-500 to-indigo-500 rounded-full flex items-center justify-center mx-auto mb-4">
                    <span className="text-2xl font-bold text-white">
                      {user?.full_name?.[0]?.toUpperCase() || "U"}
                    </span>
                  </div>
                  <h3 className="font-semibold text-lg">{user?.full_name || "User"}</h3>
                  <p className="text-sm text-slate-500">{user?.email}</p>
                </div>

                <div className="space-y-3">
                  <div className="flex items-center justify-between">
                    <span className="text-sm font-medium text-slate-700">Role</span>
                    <Badge className="bg-blue-100 text-blue-800">
                      {user?.role_type || "citizen"}
                    </Badge>
                  </div>
                  
                  <div className="flex items-center justify-between">
                    <span className="text-sm font-medium text-slate-700">Status</span>
                    <div className={`flex items-center gap-1 px-2 py-1 rounded-full ${verificationStatus.bg}`}>
                      <verificationStatus.icon className={`w-3 h-3 ${verificationStatus.color}`} />
                      <span className={`text-xs font-medium ${verificationStatus.color}`}>
                        {verificationStatus.label}
                      </span>
                    </div>
                  </div>

                  <div className="pt-4 border-t">
                    <p className="text-xs text-slate-500">Member since</p>
                    <p className="text-sm font-medium">
                      {new Date(user?.created_date).toLocaleDateString()}
                    </p>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>

          {/* Profile Form */}
          <div className="lg:col-span-2">
            <form onSubmit={handleSubmit} className="space-y-6">
              {/* Basic Information */}
              <Card>
                <CardHeader>
                  <CardTitle>Basic Information</CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="grid md:grid-cols-2 gap-4">
                    <div className="space-y-2">
                      <Label htmlFor="full_name">Full Name</Label>
                      <Input
                        id="full_name"
                        value={formData.full_name}
                        onChange={(e) => handleInputChange("full_name", e.target.value)}
                        placeholder="Enter your full name"
                      />
                    </div>
                    
                    <div className="space-y-2">
                      <Label htmlFor="phone">Phone Number</Label>
                      <Input
                        id="phone"
                        value={formData.phone}
                        onChange={(e) => handleInputChange("phone", e.target.value)}
                        placeholder="+91 98765 43210"
                      />
                    </div>
                  </div>

                  <div className="space-y-2">
                    <Label htmlFor="organization">Organization</Label>
                    <Input
                      id="organization"
                      value={formData.organization}
                      onChange={(e) => handleInputChange("organization", e.target.value)}
                      placeholder="Your organization or agency"
                    />
                  </div>

                  <div className="space-y-2">
                    <Label htmlFor="location">Location</Label>
                    <Input
                      id="location"
                      value={formData.location}
                      onChange={(e) => handleInputChange("location", e.target.value)}
                      placeholder="Your primary location (city, state)"
                    />
                  </div>
                </CardContent>
              </Card>

              {/* Role and Expertise */}
              <Card>
                <CardHeader>
                  <CardTitle>Professional Information</CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="space-y-2">
                    <Label>Role Type</Label>
                    <Select 
                      value={formData.role_type} 
                      onValueChange={(value) => handleInputChange("role_type", value)}
                    >
                      <SelectTrigger>
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        {ROLE_TYPES.map(role => (
                          <SelectItem key={role.value} value={role.value}>
                            <div>
                              <div className="font-medium">{role.label}</div>
                              <div className="text-xs text-slate-500">{role.description}</div>
                            </div>
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>

                  {(formData.role_type === "official" || formData.role_type === "analyst") && (
                    <div className="space-y-2">
                      <Label>Areas of Expertise</Label>
                      <div className="grid grid-cols-2 gap-2">
                        {EXPERTISE_AREAS.map(area => (
                          <div key={area} className="flex items-center space-x-2">
                            <input
                              type="checkbox"
                              id={area}
                              checked={formData.expertise_areas.includes(area)}
                              onChange={() => handleExpertiseToggle(area)}
                              className="rounded border-gray-300"
                            />
                            <Label htmlFor={area} className="text-sm">
                              {area}
                            </Label>
                          </div>
                        ))}
                      </div>
                    </div>
                  )}
                </CardContent>
              </Card>

              {/* Submit Button */}
              <div className="flex justify-end gap-4">
                <Button 
                  type="button" 
                  variant="outline"
                  onClick={() => navigate(createPageUrl("Dashboard"))}
                >
                  Cancel
                </Button>
                <Button 
                  type="submit" 
                  disabled={isSaving}
                  className="bg-gradient-to-r from-blue-600 to-indigo-600 hover:from-blue-700 hover:to-indigo-700"
                >
                  {isSaving ? (
                    <>
                      <Clock className="w-4 h-4 mr-2 animate-spin" />
                      Saving...
                    </>
                  ) : (
                    <>
                      <Save className="w-4 h-4 mr-2" />
                      Save Changes
                    </>
                  )}
                </Button>
              </div>
            </form>
          </div>
        </div>
      </div>
    </div>
  );
}