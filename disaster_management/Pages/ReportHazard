import React, { useState, useEffect } from "react";
import { HazardReport, User } from "@/entities/all";
import { UploadFile } from "@/integrations/Core";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Label } from "@/components/ui/label";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { Checkbox } from "@/components/ui/checkbox";
import { useNavigate } from "react-router-dom";
import { createPageUrl } from "@/utils";
import { 
  MapPin, 
  Upload, 
  AlertTriangle, 
  Camera, 
  CheckCircle, 
  Clock,
  ArrowLeft,
  Info
} from "lucide-react";

import LocationPicker from "../components/report/LocationPicker";
import MediaUploader from "../components/report/MediaUploader";
import HazardTypeSelector from "../components/report/HazardTypeSelector";

const SEVERITY_OPTIONS = [
  { value: "low", label: "Low - Minor observation", color: "text-green-600" },
  { value: "moderate", label: "Moderate - Noticeable concern", color: "text-yellow-600" },
  { value: "high", label: "High - Significant threat", color: "text-orange-600" },
  { value: "critical", label: "Critical - Immediate danger", color: "text-red-600" }
];

const IMPACT_OPTIONS = [
  { value: "none", label: "No impact observed" },
  { value: "minimal", label: "Minimal impact" },
  { value: "moderate", label: "Moderate impact" },
  { value: "significant", label: "Significant impact" },
  { value: "severe", label: "Severe impact" }
];

export default function ReportHazard() {
  const navigate = useNavigate();
  const [user, setUser] = useState(null);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [submitSuccess, setSubmitSuccess] = useState(false);
  const [currentLocation, setCurrentLocation] = useState(null);
  
  const [formData, setFormData] = useState({
    title: "",
    description: "",
    hazard_type: "",
    severity: "moderate",
    latitude: null,
    longitude: null,
    location_description: "",
    image_urls: [],
    video_urls: [],
    impact_level: "minimal",
    affected_population: 0,
    contact_info: "",
    is_emergency: false
  });

  useEffect(() => {
    loadUser();
    getCurrentLocation();
  }, []);

  const loadUser = async () => {
    try {
      const currentUser = await User.me();
      setUser(currentUser);
    } catch (error) {
      console.error("Error loading user:", error);
    }
  };

  const getCurrentLocation = () => {
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(
        (position) => {
          const location = {
            latitude: position.coords.latitude,
            longitude: position.coords.longitude
          };
          setCurrentLocation(location);
          setFormData(prev => ({
            ...prev,
            latitude: location.latitude,
            longitude: location.longitude
          }));
        },
        (error) => {
          console.log("Location access denied:", error);
        }
      );
    }
  };

  const handleInputChange = (field, value) => {
    setFormData(prev => ({ ...prev, [field]: value }));
  };

  const handleLocationSelect = (lat, lng, description) => {
    setFormData(prev => ({
      ...prev,
      latitude: lat,
      longitude: lng,
      location_description: description
    }));
  };

  const handleMediaUpload = (urls, type) => {
    if (type === "image") {
      setFormData(prev => ({
        ...prev,
        image_urls: [...prev.image_urls, ...urls]
      }));
    } else {
      setFormData(prev => ({
        ...prev,
        video_urls: [...prev.video_urls, ...urls]
      }));
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setIsSubmitting(true);

    try {
      const reportData = {
        ...formData,
        affected_population: parseInt(formData.affected_population) || 0
      };

      await HazardReport.create(reportData);
      setSubmitSuccess(true);
      
      // Redirect after success
      setTimeout(() => {
        navigate(createPageUrl("Dashboard"));
      }, 2000);
      
    } catch (error) {
      console.error("Error submitting report:", error);
    }
    setIsSubmitting(false);
  };

  if (submitSuccess) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-slate-50 to-blue-50 flex items-center justify-center p-4">
        <Card className="max-w-md w-full text-center">
          <CardContent className="p-8">
            <div className="w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4">
              <CheckCircle className="w-8 h-8 text-green-600" />
            </div>
            <h2 className="text-xl font-bold text-slate-900 mb-2">Report Submitted Successfully</h2>
            <p className="text-slate-600 mb-4">Thank you for contributing to ocean safety. Your report is being reviewed.</p>
            <div className="flex items-center justify-center gap-2 text-sm text-slate-500">
              <Clock className="w-4 h-4" />
              Redirecting to dashboard...
            </div>
          </CardContent>
        </Card>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 to-blue-50 p-4 md:p-8">
      <div className="max-w-4xl mx-auto">
        <div className="flex items-center gap-4 mb-8">
          <Button
            variant="outline"
            size="icon"
            onClick={() => navigate(createPageUrl("Dashboard"))}
          >
            <ArrowLeft className="w-4 h-4" />
          </Button>
          <div>
            <h1 className="text-3xl font-bold text-slate-900">Report Ocean Hazard</h1>
            <p className="text-slate-600">Help protect our coastal communities by reporting observed hazards</p>
          </div>
        </div>

        <form onSubmit={handleSubmit} className="space-y-8">
          {/* Emergency Alert */}
          <Alert className="border-red-200 bg-red-50">
            <AlertTriangle className="w-4 h-4 text-red-600" />
            <AlertDescription className="text-red-800">
              <strong>Emergency Situation?</strong> For immediate life-threatening situations, call emergency services (108) first, then submit your report.
            </AlertDescription>
          </Alert>

          {/* Basic Information */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Info className="w-5 h-5" />
                Basic Information
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-6">
              <div className="space-y-2">
                <Label htmlFor="title">Report Title *</Label>
                <Input
                  id="title"
                  placeholder="Brief description of what you observed"
                  value={formData.title}
                  onChange={(e) => handleInputChange("title", e.target.value)}
                  required
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="description">Detailed Description *</Label>
                <Textarea
                  id="description"
                  placeholder="Provide detailed information about the hazard you observed..."
                  value={formData.description}
                  onChange={(e) => handleInputChange("description", e.target.value)}
                  className="min-h-24"
                  required
                />
              </div>

              <HazardTypeSelector
                value={formData.hazard_type}
                onChange={(value) => handleInputChange("hazard_type", value)}
              />

              <div className="grid md:grid-cols-2 gap-6">
                <div className="space-y-2">
                  <Label>Severity Level *</Label>
                  <Select 
                    value={formData.severity} 
                    onValueChange={(value) => handleInputChange("severity", value)}
                  >
                    <SelectTrigger>
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      {SEVERITY_OPTIONS.map(option => (
                        <SelectItem key={option.value} value={option.value}>
                          <span className={option.color}>{option.label}</span>
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>

                <div className="space-y-2">
                  <Label>Impact Level</Label>
                  <Select 
                    value={formData.impact_level} 
                    onValueChange={(value) => handleInputChange("impact_level", value)}
                  >
                    <SelectTrigger>
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      {IMPACT_OPTIONS.map(option => (
                        <SelectItem key={option.value} value={option.value}>
                          {option.label}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
              </div>

              <div className="flex items-center space-x-2">
                <Checkbox
                  id="emergency"
                  checked={formData.is_emergency}
                  onCheckedChange={(checked) => handleInputChange("is_emergency", checked)}
                />
                <Label htmlFor="emergency" className="text-red-600 font-medium">
                  This is an emergency situation requiring immediate attention
                </Label>
              </div>
            </CardContent>
          </Card>

          {/* Location Information */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <MapPin className="w-5 h-5" />
                Location Information
              </CardTitle>
            </CardHeader>
            <CardContent>
              <LocationPicker
                currentLocation={currentLocation}
                onLocationSelect={handleLocationSelect}
                selectedLocation={{
                  lat: formData.latitude,
                  lng: formData.longitude,
                  description: formData.location_description
                }}
              />
            </CardContent>
          </Card>

          {/* Media Upload */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Camera className="w-5 h-5" />
                Photos & Videos
              </CardTitle>
            </CardHeader>
            <CardContent>
              <MediaUploader
                onUpload={handleMediaUpload}
                existingImages={formData.image_urls}
                existingVideos={formData.video_urls}
              />
            </CardContent>
          </Card>

          {/* Additional Details */}
          <Card>
            <CardHeader>
              <CardTitle>Additional Information</CardTitle>
            </CardHeader>
            <CardContent className="space-y-6">
              <div className="space-y-2">
                <Label htmlFor="affected_population">Estimated Affected Population</Label>
                <Input
                  id="affected_population"
                  type="number"
                  min="0"
                  placeholder="Number of people potentially affected"
                  value={formData.affected_population}
                  onChange={(e) => handleInputChange("affected_population", e.target.value)}
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="contact_info">Contact Information (Optional)</Label>
                <Input
                  id="contact_info"
                  placeholder="Phone number or email for follow-up"
                  value={formData.contact_info}
                  onChange={(e) => handleInputChange("contact_info", e.target.value)}
                />
              </div>
            </CardContent>
          </Card>

          {/* Submit Button */}
          <div className="flex justify-end gap-4">
            <Button 
              type="button" 
              variant="outline"
              onClick={() => navigate(createPageUrl("Dashboard"))}
            >
              Cancel
            </Button>
            <Button 
              type="submit" 
              disabled={isSubmitting || !formData.title || !formData.description || !formData.hazard_type}
              className="bg-gradient-to-r from-blue-600 to-indigo-600 hover:from-blue-700 hover:to-indigo-700"
            >
              {isSubmitting ? "Submitting..." : "Submit Report"}
            </Button>
          </div>
        </form>
      </div>
    </div>
  );
}